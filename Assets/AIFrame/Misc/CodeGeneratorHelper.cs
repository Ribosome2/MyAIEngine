using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using UnityEditor;
using UnityEngine;

public static class CodeGeneratorHelper
{
    private static string srcFolderPath
    {
        get { return Directory.GetCurrentDirectory() + "/srcFile"; }
    }

    private static string outPutFolderPath
    {
        get { return Directory.GetCurrentDirectory() + "/codeOutPut"; }
    }

    public static void ScanFiles()
    {
        string[] files = Directory.GetFiles(srcFolderPath, "*.prot");
        for (int i = 0; i < files.Length; i++)
        {
            CreateCodeFile(files[i]);
        }
    }

    public static void CreateCodeFile(string srcPath)
    {
        if (File.Exists(srcPath))
        {
            string fileText = File.ReadAllText(srcPath);
            ProtoFileConvertor con = new ProtoFileConvertor(fileText);
            string path = outPutFolderPath + "/" + con.GetFileName();
            if (File.Exists(path))
            {
                File.Delete(path);
            }
            File.WriteAllText(path, con.OutPutText);
        }
        else
        {
            Debug.Log(string.Format("路径{0}不存在", srcPath));
        }
    }

    public class ProtoFileConvertor
    {
        private string outPutLines = "";
        private List<CustomStuct> mCustomStucts = new List<CustomStuct>();
        private string mSrcText;
        private int index;
        private string fileName;

        public static List<string> CommonVarTypes = new List<string>()
        {
            "uint64",
            "int64",
            "uint32",
            "int32",
            "int",
            "uint",
            "string",
            "int8",
            "uint8",
            "uint16",
            "int16"
        };

        public ProtoFileConvertor(string srcText)
        {
            mSrcText = srcText;
            index = 0;
            mCustomStucts.Clear();
            ProcessText();
        }

        public string GetFileName()
        {
            return fileName + ".cs";
        }

        public string OutPutText
        {
            get
            {
                string prefix = "//This file is generated by code, DO NOT EDIT !!!! \n";
                return prefix + outPutLines;
            }
        }

        private void ProcessText()
        {
            outPutLines = "";
            string firstMarker = FindWord();
            if (firstMarker != "message")
            {
                throw new Exception("没有文件标记message");
                return;
            }
            else
            {
                string name = FindWord();
                fileName = name;
                outPutLines += (string.Format("public class {0}", name)) + "\n{";
            }

            while (index < mSrcText.Length)
            {
                string word1 = FindWord();
                if (string.IsNullOrEmpty(word1))
                {
                    Debug.Log("已经找不到单词，即将结束" + index);
                }
                else
                {
                    if (word1 == "struct")
                    {
                        CreateCustomClass();
                    }
                    else
                    {
                        if (IsValidVarType(word1))
                        {
                            string varName = FindWord();
                            string Line = string.Format("    public {0}  {1};", word1, varName);
                            outPutLines += "\n" + (Line);
                        }
                        else
                        {
                            throw new Exception(string.Format("文件{0}变量类型{1}不合法", fileName, word1));
                        }
                    }
                }
            }
            outPutLines += "\n}";
        }

        private void CreateCustomClass()
        {
            string structName = FindWord();
            if (string.IsNullOrEmpty(structName))
            {
                throw new System.Exception("结构名为空");
            }
            CustomStuct newStuct = new CustomStuct(structName);
            mCustomStucts.Add(newStuct);
            outPutLines += "\n" + (string.Format("    public class {0}", structName) + "\n    {");
            ProcessAngleBraket();
            while (index < mSrcText.Length)
            {
                char c = mSrcText[index];
                index++;
                if (c == '}' || c == ';')
                {
                    break;
                }
                char[] stopTokens = new[] {'}'};
                string varType = FindWord(stopTokens);
                if (string.IsNullOrEmpty(varType) == false)
                {
                    if (IsValidVarType(varType))
                    {
                        string varName = FindWord();
                        outPutLines += "\n" + (string.Format("       public {0}  {1} ;", varType, varName));
                        newStuct.properties.Add(new PropertyPair(varType, varName));
                    }
                    else
                    {
                        throw new Exception(string.Format("变量类型{0}不合法", varType));
                    }
                }
            }
            outPutLines += ("\n    }");
        }

        /// <summary>
        /// 寻找下一个单词， 
        /// </summary>
        /// <param name="stopChars">需要检测中途退出的字符</param>
        /// <returns></returns> 
        private string FindWord(char[] stopChars = null)
        {
            string word = "";
            while (index < mSrcText.Length)
            {
                char c = mSrcText[index];
                index++;
                if (stopChars != null && stopChars.Contains(c))
                {
                    break;
                }
                if (c == '[') //"["
                {
                    ProcessAngleBraket();
                }
                else if (c == '/')
                {
                    ProcessComments();
                }
                else //如果已经找到非空的单词
                    if (string.IsNullOrEmpty(word) == false)
                    {
                        if (IsValidCharacter(c))
                        {
                            word += c;
                        }
                        else
                        {
                            return word;
                        }
                    }
                    else //首字母还没有
                    {
                        if (IsValidFirstCharacter(ref c))
                        {
                            word += c;
                        }
                    }
            }

            Debug.Log("word: " + word);
            return word;
        }

        private void ProcessAngleBraket()
        {
            while (index < mSrcText.Length)
            {
                char c = mSrcText[index];
                index++;
                if (c == ']')
                {
                    break;
                }
            }
        }

        private void ProcessComments()
        {
            outPutLines += '/';
            string comment = "";
            while (index < mSrcText.Length)
            {
                char c = mSrcText[index];
                index++;
                if (c == '\r')
                {
                    outPutLines += comment;
                    Debug.Log("Comment:　" + comment);
                    break;
                }
                else
                {
                    comment += c;
                }
            }
        }

        private bool IsValidCharacter(char c)
        {
            if ((c > 47 && c < 58) || //数字
                (c > 64 && c < 91) || //大小写字母 
                (c > 96 && c < 123) ||
                c == '_' /* "_"*/)
            {
                return true;
            }
            return false;
        }

        /// <summary>
        /// 是否合法的的首字母
        /// </summary> 
        /// <param name="c"></param>
        /// <returns></returns> 
        private bool IsValidFirstCharacter(ref char c)
        {
            if ((c > 64 && c < 91) ||
                (c > 97 && c < 122))
            {
                return true;
            }
            return false;
        }

        private bool IsValidVarType(string str)
        {
            if ((CommonVarTypes.Contains(str)))
            {
                return true;
            }
            else
            {
                return mCustomStucts.Find(delegate(CustomStuct myStuct) { return myStuct.Name == str; }) != null;
            }
        }
    }


    public class CustomStuct
    {
        public string Name;
        public List<PropertyPair> properties = new List<PropertyPair>();

        public CustomStuct(string structName)
        {
            Name = structName;
        }
    }

    public class PropertyPair
    {
        public string type;
        public string name;

        public PropertyPair(string pType, string pName)
        {
            type = pType;
            name = pName;
        }
    }
}
